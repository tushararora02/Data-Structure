import collections

class graph:
    def __init__(self,gdict=None):
        if gdict is None:
            gdict={}
        self.gdict=gdict
        
def dfs(graph,start,Visited=None):
    
    if Visited is None:
        Visited=set()
    Visited.add(start)
    print(start)
    for nodes in graph[start]-Visited:
        dfs(graph,nodes,Visited)
    return Visited 
    




def bfs(graph,startnode):
    seen=set([startnode])
    queue=collections.deque([startnode])
    while queue:
        vertex=queue.popleft()
        print(vertex)
        for node in graph[vertex]:
            if node not in seen:
                seen.add(node)
                queue.append(node)
            
gdict = { 
   "a" : set(["b","c"]),
   "b" : set(["a", "d"]),
   "c" : set(["a", "d"]),
   "d" : set(["e"]),
   "e" : set(["a"])
}
dfs(gdict,"a")

print("bfs")
bfs(gdict,"a")