class height:
    def __init__(self):
        self.height=0

class Nodes:
    def __init__(self,data):
        self.right=None
        self.left=None
        self.data=data
    
    def insert(self,root,data):
        
        if root is None:
            root=Nodes(data)
        elif data<root.data:
            root.left=self.insert(root.left,data)
        else:
            root.right=self.insert(root.right,data)
        return root
        
       
    
    def delete(self,root,value):
        
        if root is None:
            return root
        if value<root.data:
            root.left=self.delete(root.left,value)
        elif value>root.data:
            root.right=self.delete(root.right,value)
        else:
            if root.left is None:
                temp=root.right
                root=None
                return temp
            if root.right is None:
                temp=root.left
                root=None
                return temp
            else:
                temp=root.right
                while temp.left is not None:
                    temp=temp.left
                root.data=temp.data
                root.right=self.delete(root.right,temp.data)
        return root
        
    
    def inorderTraversal(self,root):
        res=[]
        if root:
            res=self.inorderTraversal(root.left)
            res.append(root.data)
            res+=self.inorderTraversal(root.right)
        return res
    def preorderTraversal(self,root):
        res=[]
        if root:
            res.append(root.data)
            res+=self.preorderTraversal(root.left)
            res+=self.preorderTraversal(root.right)
        return res
    
    def postorderTraversal(self,root):
        res=[]
        if root:
            res=self.postorderTraversal(root.left)
            res+=self.postorderTraversal(root.right)
            res.append(root.data)
        return res
        
    def isBalanced(self,root):
        lh=height()
        rh=height()
        if root is None :
            return True
        
        return (
            (abs(lh.height-rh.height)<=1)
            and self.isBalanced(root.left)
            and self.isBalanced(root.right))
            
        
        

root = Nodes(27)
root.insert(root,14)
root.insert(root,35)
root.insert(root,10)
root.insert(root,19)
root.insert(root,31)
root.insert(root,42)
print ("postorder traversal")
print(root.postorderTraversal(root))
print ("Inorder traversal")
print(root.inorderTraversal(root))
print ("preorder traversal")
print(root.preorderTraversal(root))

root.delete(root,27)
print ("Inorder traversal after delete")
print(root.inorderTraversal(root))
print(root.isBalanced(root))

