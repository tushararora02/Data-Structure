class Node:
    def __init__(self,datavalue=None):
        self.datavalue=datavalue
        self.nextval=None
    
    
class LinkedList:
    
    def __init__(self):
        self.headval=None
    
    def printAll(self):
        
        printval=self.headval
        while printval is not None:
            print(printval.datavalue)
            printval=printval.nextval
    
    def addAtBeginning(self,newvalue):
        NewNode=Node(newvalue)
        NewNode.nextval=self.headval
        self.headval=NewNode
        
    def addAtEnd(self,newvalue):
        NewNode=Node(newvalue)
        
        if self.headval is None:
            self.headval=NewNode
            return
        lastnode=self.headval
        while(lastnode.nextval):
            lastnode=lastnode.nextval
            
        lastnode.nextval=NewNode
    
    def addAtMiddle(self,middle,newvalue):
        
        if middle is None:
            print("mention Node is absent")
        
        NewNode=Node(newvalue)
        NewNode.nextval=middle.nextval
        middle.nextval=NewNode
        
    def removethenode(self,removevalue):
        headval=self.headval
        if headval is not None:
            if(headval.datavalue==removevalue):
                self.headval=headval.nextval
                headval=None
                return
            
        while(headval is not None):
            if(headval.datavalue==removevalue):
                break
            prev=headval
            headval=headval.nextval
        
        if(headval==None):
            return
        
        prev.nextval=headval.nextval
        headval=None
        
        
      
        
        
            
list1=LinkedList()
list1.headval=Node("Mon")
node1=Node("Tue")
node2=Node("Wed")

list1.headval.nextval=node1
node1.nextval=node2
list1.addAtBeginning("Sun")
list1.addAtEnd("Thu")
list1.addAtMiddle(node2,"fri")
list1.removethenode("fri")
list1.printAll()


